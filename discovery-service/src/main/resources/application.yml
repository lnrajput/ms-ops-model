# Default port 8761
server:
  port: 8765

#security:
#  user:
#    password: ${eureka.password} # Don't use a default password in a real app

info:
  component: Discovery Service


eureka:
  # Configure standalone mode, see http://cloud.spring.io/spring-cloud-netflix/spring-cloud-netflix.html#_standalone_mode
  client:
    register-with-eureka: false
    fetch-registry: false
    service-url:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
  instance:
    hostname: localhost
  server:
     #password: ${SECURITY_USER_PASSWORD:password}
     # Disable self-preservation during development, see https://github.com/Netflix/eureka/wiki/Understanding-Eureka-Peer-to-Peer-Communication
     enable-self-preservation: false
     # Set this only for this sample service without which starting the instance will by default wait for the default of 5 mins
     wait-time-in-ms-when-sync-empty: 0

    # for the example, set this to zero as we will not have peers to sync up with.
    # Do not set in a real environment with multi-node eureka clusters.
     number-of-replication-retries: 0
     response-cache-update-interval-ms: 1000
spring:
  thymeleaf:
    enabled: false   

logging:
  level:
    root: WARN

    # Set INFO to see the allocated port
    org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer: INFO
       
---
# Eureka instance 1 when used on Docker
spring:
  profiles: docker1
eureka:
  instance:
    hostname: discovery
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://user:${eureka.password}@discovery2:8762/eureka/

---
# Eureka instance 2 when used on Docker
spring:
  profiles: docker2
server:
  port: 8762
eureka:
  instance:
    hostname: discovery2
    nonSecurePort: ${server.port}
  client:
    serviceUrl:
      defaultZone: http://user:${eureka.password}@discovery:8761/eureka/
